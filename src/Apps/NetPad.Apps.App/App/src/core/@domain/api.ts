// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
import {IHttpClient} from "aurelia";


export interface IAppApiClient {

    openFolderContainingScript(scriptPath: string | null | undefined): Promise<FileResponse | null>;

    openScriptsFolder(path: string | null | undefined): Promise<FileResponse | null>;

    openPackageCacheFolder(): Promise<FileResponse | null>;
}

export class AppApiClient implements IAppApiClient {
    private http: IHttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, @IHttpClient http?: IHttpClient) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    openFolderContainingScript(scriptPath: string | null | undefined, signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/app/open-folder-containing-script?";
        if (scriptPath !== undefined && scriptPath !== null)
            url_ += "scriptPath=" + encodeURIComponent("" + scriptPath) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOpenFolderContainingScript(_response);
        });
    }

    protected processOpenFolderContainingScript(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    openScriptsFolder(path: string | null | undefined, signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/app/open-scripts-folder?";
        if (path !== undefined && path !== null)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOpenScriptsFolder(_response);
        });
    }

    protected processOpenScriptsFolder(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    openPackageCacheFolder(signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/app/open-package-cache-folder";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOpenPackageCacheFolder(_response);
        });
    }

    protected processOpenPackageCacheFolder(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export interface IAssembliesApiClient {

    getNamespaces(reference: Reference): Promise<string[]>;
}

export class AssembliesApiClient implements IAssembliesApiClient {
    private http: IHttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, @IHttpClient http?: IHttpClient) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getNamespaces(reference: Reference, signal?: AbortSignal | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/assemblies/namespaces";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(reference);

        let options_ = <RequestInit>{
            body: content_,
            method: "PATCH",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNamespaces(_response);
        });
    }

    protected processGetNamespaces(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export interface IPackagesApiClient {

    getCachedPackages(loadMetadata: boolean | undefined): Promise<CachedPackage[]>;

    deleteCachedPackage(packageId: string | null | undefined, packageVersion: string | null | undefined): Promise<FileResponse | null>;

    getExplicitlyInstalledCachedPackages(loadMetadata: boolean | undefined): Promise<CachedPackage[]>;

    purgePackageCache(): Promise<FileResponse | null>;

    getPackageVersions(packageId: string | null | undefined): Promise<string[]>;

    search(term: string | null | undefined, skip: number | null | undefined, take: number | null | undefined, includePrerelease: boolean | null | undefined): Promise<PackageMetadata[]>;

    install(packageId: string | null | undefined, packageVersion: string | null | undefined): Promise<FileResponse | null>;
}

export class PackagesApiClient implements IPackagesApiClient {
    private http: IHttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, @IHttpClient http?: IHttpClient) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCachedPackages(loadMetadata: boolean | undefined, signal?: AbortSignal | undefined): Promise<CachedPackage[]> {
        let url_ = this.baseUrl + "/packages/cache?";
        if (loadMetadata === null)
            throw new Error("The parameter 'loadMetadata' cannot be null.");
        else if (loadMetadata !== undefined)
            url_ += "loadMetadata=" + encodeURIComponent("" + loadMetadata) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCachedPackages(_response);
        });
    }

    protected processGetCachedPackages(response: Response): Promise<CachedPackage[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CachedPackage.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CachedPackage[]>(<any>null);
    }

    deleteCachedPackage(packageId: string | null | undefined, packageVersion: string | null | undefined, signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/packages/cache?";
        if (packageId !== undefined && packageId !== null)
            url_ += "packageId=" + encodeURIComponent("" + packageId) + "&";
        if (packageVersion !== undefined && packageVersion !== null)
            url_ += "packageVersion=" + encodeURIComponent("" + packageVersion) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            signal,
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCachedPackage(_response);
        });
    }

    protected processDeleteCachedPackage(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    getExplicitlyInstalledCachedPackages(loadMetadata: boolean | undefined, signal?: AbortSignal | undefined): Promise<CachedPackage[]> {
        let url_ = this.baseUrl + "/packages/cache/explicitly-installed?";
        if (loadMetadata === null)
            throw new Error("The parameter 'loadMetadata' cannot be null.");
        else if (loadMetadata !== undefined)
            url_ += "loadMetadata=" + encodeURIComponent("" + loadMetadata) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExplicitlyInstalledCachedPackages(_response);
        });
    }

    protected processGetExplicitlyInstalledCachedPackages(response: Response): Promise<CachedPackage[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CachedPackage.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CachedPackage[]>(<any>null);
    }

    purgePackageCache(signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/packages/cache/purge";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPurgePackageCache(_response);
        });
    }

    protected processPurgePackageCache(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    getPackageVersions(packageId: string | null | undefined, signal?: AbortSignal | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/packages/versions?";
        if (packageId !== undefined && packageId !== null)
            url_ += "packageId=" + encodeURIComponent("" + packageId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPackageVersions(_response);
        });
    }

    protected processGetPackageVersions(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(<any>null);
    }

    search(term: string | null | undefined, skip: number | null | undefined, take: number | null | undefined, includePrerelease: boolean | null | undefined, signal?: AbortSignal | undefined): Promise<PackageMetadata[]> {
        let url_ = this.baseUrl + "/packages/search?";
        if (term !== undefined && term !== null)
            url_ += "term=" + encodeURIComponent("" + term) + "&";
        if (skip !== undefined && skip !== null)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (take !== undefined && take !== null)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (includePrerelease !== undefined && includePrerelease !== null)
            url_ += "includePrerelease=" + encodeURIComponent("" + includePrerelease) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearch(_response);
        });
    }

    protected processSearch(response: Response): Promise<PackageMetadata[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PackageMetadata.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PackageMetadata[]>(<any>null);
    }

    install(packageId: string | null | undefined, packageVersion: string | null | undefined, signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/packages/install?";
        if (packageId !== undefined && packageId !== null)
            url_ += "packageId=" + encodeURIComponent("" + packageId) + "&";
        if (packageVersion !== undefined && packageVersion !== null)
            url_ += "packageVersion=" + encodeURIComponent("" + packageVersion) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInstall(_response);
        });
    }

    protected processInstall(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export interface IScriptsApiClient {

    getScripts(): Promise<ScriptSummary[]>;

    create(): Promise<void>;

    save(id: string): Promise<void>;

    run(id: string): Promise<void>;

    updateCode(id: string, code: string): Promise<void>;

    openConfigWindow(id: string): Promise<void>;

    setScriptNamespaces(id: string, namespaces: string[]): Promise<FileResponse | null>;

    setReferences(id: string, newReferences: Reference[]): Promise<FileResponse | null>;

    setScriptKind(id: string, scriptKind: ScriptKind): Promise<FileResponse | null>;
}

export class ScriptsApiClient implements IScriptsApiClient {
    private http: IHttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, @IHttpClient http?: IHttpClient) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getScripts(signal?: AbortSignal | undefined): Promise<ScriptSummary[]> {
        let url_ = this.baseUrl + "/scripts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetScripts(_response);
        });
    }

    protected processGetScripts(response: Response): Promise<ScriptSummary[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ScriptSummary.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScriptSummary[]>(<any>null);
    }

    create(signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/scripts/create";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    save(id: string, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/scripts/{id}/save";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    run(id: string, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/scripts/{id}/run";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRun(_response);
        });
    }

    protected processRun(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    updateCode(id: string, code: string, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/scripts/{id}/code";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(code);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCode(_response);
        });
    }

    protected processUpdateCode(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    openConfigWindow(id: string, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/scripts/{id}/open-config";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOpenConfigWindow(_response);
        });
    }

    protected processOpenConfigWindow(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    setScriptNamespaces(id: string, namespaces: string[], signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/scripts/{id}/namespaces";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(namespaces);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetScriptNamespaces(_response);
        });
    }

    protected processSetScriptNamespaces(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    setReferences(id: string, newReferences: Reference[], signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/scripts/{id}/references";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newReferences);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetReferences(_response);
        });
    }

    protected processSetReferences(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    setScriptKind(id: string, scriptKind: ScriptKind, signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/scripts/{id}/kind";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(scriptKind);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetScriptKind(_response);
        });
    }

    protected processSetScriptKind(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export interface ISessionApiClient {

    getEnvironment(scriptId: string): Promise<ScriptEnvironment>;

    getEnvironments(): Promise<ScriptEnvironment[]>;

    openByPath(scriptPath: string): Promise<void>;

    close(scriptId: string): Promise<void>;

    getActive(): Promise<string | null>;

    activate(scriptId: string): Promise<void>;

    activateLastActive(): Promise<void>;
}

export class SessionApiClient implements ISessionApiClient {
    private http: IHttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, @IHttpClient http?: IHttpClient) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getEnvironment(scriptId: string, signal?: AbortSignal | undefined): Promise<ScriptEnvironment> {
        let url_ = this.baseUrl + "/session/environments/{scriptId}";
        if (scriptId === undefined || scriptId === null)
            throw new Error("The parameter 'scriptId' must be defined.");
        url_ = url_.replace("{scriptId}", encodeURIComponent("" + scriptId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnvironment(_response);
        });
    }

    protected processGetEnvironment(response: Response): Promise<ScriptEnvironment> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScriptEnvironment.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScriptEnvironment>(<any>null);
    }

    getEnvironments(signal?: AbortSignal | undefined): Promise<ScriptEnvironment[]> {
        let url_ = this.baseUrl + "/session/environments";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnvironments(_response);
        });
    }

    protected processGetEnvironments(response: Response): Promise<ScriptEnvironment[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ScriptEnvironment.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScriptEnvironment[]>(<any>null);
    }

    openByPath(scriptPath: string, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/session/open/path";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(scriptPath);

        let options_ = <RequestInit>{
            body: content_,
            method: "PATCH",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOpenByPath(_response);
        });
    }

    protected processOpenByPath(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    close(scriptId: string, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/session/{scriptId}/close";
        if (scriptId === undefined || scriptId === null)
            throw new Error("The parameter 'scriptId' must be defined.");
        url_ = url_.replace("{scriptId}", encodeURIComponent("" + scriptId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClose(_response);
        });
    }

    protected processClose(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    getActive(signal?: AbortSignal | undefined): Promise<string | null> {
        let url_ = this.baseUrl + "/session/active";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetActive(_response);
        });
    }

    protected processGetActive(response: Response): Promise<string | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string | null>(<any>null);
    }

    activate(scriptId: string, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/session/{scriptId}/activate";
        if (scriptId === undefined || scriptId === null)
            throw new Error("The parameter 'scriptId' must be defined.");
        url_ = url_.replace("{scriptId}", encodeURIComponent("" + scriptId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivate(_response);
        });
    }

    protected processActivate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    activateLastActive(signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/session/activate-last-active";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivateLastActive(_response);
        });
    }

    protected processActivateLastActive(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface ISettingsApiClient {

    get(): Promise<Settings>;

    update(settings: Settings): Promise<FileResponse | null>;

    openSettingsWindow(): Promise<void>;

    showSettingsFile(): Promise<FileResponse | null>;
}

export class SettingsApiClient implements ISettingsApiClient {
    private http: IHttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, @IHttpClient http?: IHttpClient) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(signal?: AbortSignal | undefined): Promise<Settings> {
        let url_ = this.baseUrl + "/settings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Settings> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Settings.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Settings>(<any>null);
    }

    update(settings: Settings, signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/settings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(settings);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    openSettingsWindow(signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/settings/open";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOpenSettingsWindow(_response);
        });
    }

    protected processOpenSettingsWindow(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    showSettingsFile(signal?: AbortSignal | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/settings/show-settings-file";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PATCH",
            signal,
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processShowSettingsFile(_response);
        });
    }

    protected processShowSettingsFile(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export interface ITypesApiClient {

    additionalTypes(): Promise<Types>;
}

export class TypesApiClient implements ITypesApiClient {
    private http: IHttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, @IHttpClient http?: IHttpClient) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    additionalTypes(signal?: AbortSignal | undefined): Promise<Types> {
        let url_ = this.baseUrl + "/types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdditionalTypes(_response);
        });
    }

    protected processAdditionalTypes(response: Response): Promise<Types> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Types.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Types>(<any>null);
    }
}

export abstract class Reference implements IReference {
    title!: string;

    protected _discriminator: string;

    constructor(data?: IReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "Reference";
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): Reference {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "AssemblyReference") {
            let result = new AssemblyReference();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "PackageReference") {
            let result = new PackageReference();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'Reference' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["title"] = this.title;
        return data;
    }

    clone(): Reference {
        throw new Error("The abstract class 'Reference' cannot be instantiated.");
    }
}

export interface IReference {
    title: string;
}

export class AssemblyReference extends Reference implements IAssemblyReference {
    assemblyPath!: string;

    constructor(data?: IAssemblyReference) {
        super(data);
        this._discriminator = "AssemblyReference";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assemblyPath = _data["assemblyPath"];
        }
    }

    static fromJS(data: any): AssemblyReference {
        data = typeof data === 'object' ? data : {};
        let result = new AssemblyReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assemblyPath"] = this.assemblyPath;
        super.toJSON(data);
        return data;
    }

    clone(): AssemblyReference {
        const json = this.toJSON();
        let result = new AssemblyReference();
        result.init(json);
        return result;
    }
}

export interface IAssemblyReference extends IReference {
    assemblyPath: string;
}

export class PackageReference extends Reference implements IPackageReference {
    packageId!: string;
    version!: string;

    constructor(data?: IPackageReference) {
        super(data);
        this._discriminator = "PackageReference";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.packageId = _data["packageId"];
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): PackageReference {
        data = typeof data === 'object' ? data : {};
        let result = new PackageReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageId"] = this.packageId;
        data["version"] = this.version;
        super.toJSON(data);
        return data;
    }

    clone(): PackageReference {
        const json = this.toJSON();
        let result = new PackageReference();
        result.init(json);
        return result;
    }
}

export interface IPackageReference extends IReference {
    packageId: string;
    version: string;
}

export class PackageMetadata implements IPackageMetadata {
    packageId!: string;
    version?: string | undefined;
    title!: string;
    authors?: string | undefined;
    description?: string | undefined;
    iconUrl?: string | undefined;
    projectUrl?: string | undefined;
    packageDetailsUrl?: string | undefined;
    licenseUrl?: string | undefined;
    readmeUrl?: string | undefined;
    reportAbuseUrl?: string | undefined;
    requireLicenseAcceptance?: boolean | undefined;
    dependencies!: string[];
    downloadCount?: number | undefined;
    publishedDate?: Date | undefined;

    constructor(data?: IPackageMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.dependencies = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageId = _data["packageId"];
            this.version = _data["version"];
            this.title = _data["title"];
            this.authors = _data["authors"];
            this.description = _data["description"];
            this.iconUrl = _data["iconUrl"];
            this.projectUrl = _data["projectUrl"];
            this.packageDetailsUrl = _data["packageDetailsUrl"];
            this.licenseUrl = _data["licenseUrl"];
            this.readmeUrl = _data["readmeUrl"];
            this.reportAbuseUrl = _data["reportAbuseUrl"];
            this.requireLicenseAcceptance = _data["requireLicenseAcceptance"];
            if (Array.isArray(_data["dependencies"])) {
                this.dependencies = [] as any;
                for (let item of _data["dependencies"])
                    this.dependencies!.push(item);
            }
            this.downloadCount = _data["downloadCount"];
            this.publishedDate = _data["publishedDate"] ? new Date(_data["publishedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PackageMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new PackageMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageId"] = this.packageId;
        data["version"] = this.version;
        data["title"] = this.title;
        data["authors"] = this.authors;
        data["description"] = this.description;
        data["iconUrl"] = this.iconUrl;
        data["projectUrl"] = this.projectUrl;
        data["packageDetailsUrl"] = this.packageDetailsUrl;
        data["licenseUrl"] = this.licenseUrl;
        data["readmeUrl"] = this.readmeUrl;
        data["reportAbuseUrl"] = this.reportAbuseUrl;
        data["requireLicenseAcceptance"] = this.requireLicenseAcceptance;
        if (Array.isArray(this.dependencies)) {
            data["dependencies"] = [];
            for (let item of this.dependencies)
                data["dependencies"].push(item);
        }
        data["downloadCount"] = this.downloadCount;
        data["publishedDate"] = this.publishedDate ? this.publishedDate.toISOString() : <any>undefined;
        return data;
    }

    clone(): PackageMetadata {
        const json = this.toJSON();
        let result = new PackageMetadata();
        result.init(json);
        return result;
    }
}

export interface IPackageMetadata {
    packageId: string;
    version?: string | undefined;
    title: string;
    authors?: string | undefined;
    description?: string | undefined;
    iconUrl?: string | undefined;
    projectUrl?: string | undefined;
    packageDetailsUrl?: string | undefined;
    licenseUrl?: string | undefined;
    readmeUrl?: string | undefined;
    reportAbuseUrl?: string | undefined;
    requireLicenseAcceptance?: boolean | undefined;
    dependencies: string[];
    downloadCount?: number | undefined;
    publishedDate?: Date | undefined;
}

export class CachedPackage extends PackageMetadata implements ICachedPackage {
    installReason!: PackageInstallReason;
    directoryPath?: string | undefined;

    constructor(data?: ICachedPackage) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.installReason = _data["installReason"];
            this.directoryPath = _data["directoryPath"];
        }
    }

    static fromJS(data: any): CachedPackage {
        data = typeof data === 'object' ? data : {};
        let result = new CachedPackage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["installReason"] = this.installReason;
        data["directoryPath"] = this.directoryPath;
        super.toJSON(data);
        return data;
    }

    clone(): CachedPackage {
        const json = this.toJSON();
        let result = new CachedPackage();
        result.init(json);
        return result;
    }
}

export interface ICachedPackage extends IPackageMetadata {
    installReason: PackageInstallReason;
    directoryPath?: string | undefined;
}

export type PackageInstallReason = "Explicit" | "Dependency";

export class ScriptSummary implements IScriptSummary {
    id!: string;
    name!: string;
    path!: string;

    constructor(data?: IScriptSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): ScriptSummary {
        data = typeof data === 'object' ? data : {};
        let result = new ScriptSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["path"] = this.path;
        return data;
    }

    clone(): ScriptSummary {
        const json = this.toJSON();
        let result = new ScriptSummary();
        result.init(json);
        return result;
    }
}

export interface IScriptSummary {
    id: string;
    name: string;
    path: string;
}

export type ScriptKind = "Expression" | "Program";

export class ScriptEnvironment implements IScriptEnvironment {
    script!: Script;
    status!: ScriptStatus;
    runDurationMilliseconds!: number;

    constructor(data?: IScriptEnvironment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.script = new Script();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.script = _data["script"] ? Script.fromJS(_data["script"]) : new Script();
            this.status = _data["status"];
            this.runDurationMilliseconds = _data["runDurationMilliseconds"];
        }
    }

    static fromJS(data: any): ScriptEnvironment {
        data = typeof data === 'object' ? data : {};
        let result = new ScriptEnvironment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["script"] = this.script ? this.script.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["runDurationMilliseconds"] = this.runDurationMilliseconds;
        return data;
    }

    clone(): ScriptEnvironment {
        const json = this.toJSON();
        let result = new ScriptEnvironment();
        result.init(json);
        return result;
    }
}

export interface IScriptEnvironment {
    script: Script;
    status: ScriptStatus;
    runDurationMilliseconds: number;
}

export class Script implements IScript {
    id!: string;
    name!: string;
    path?: string | undefined;
    config!: ScriptConfig;
    code!: string;
    isDirty!: boolean;
    directoryPath?: string | undefined;
    isNew!: boolean;

    constructor(data?: IScript) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.config = new ScriptConfig();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.path = _data["path"];
            this.config = _data["config"] ? ScriptConfig.fromJS(_data["config"]) : new ScriptConfig();
            this.code = _data["code"];
            this.isDirty = _data["isDirty"];
            this.directoryPath = _data["directoryPath"];
            this.isNew = _data["isNew"];
        }
    }

    static fromJS(data: any): Script {
        data = typeof data === 'object' ? data : {};
        let result = new Script();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["path"] = this.path;
        data["config"] = this.config ? this.config.toJSON() : <any>undefined;
        data["code"] = this.code;
        data["isDirty"] = this.isDirty;
        data["directoryPath"] = this.directoryPath;
        data["isNew"] = this.isNew;
        return data;
    }

    clone(): Script {
        const json = this.toJSON();
        let result = new Script();
        result.init(json);
        return result;
    }
}

export interface IScript {
    id: string;
    name: string;
    path?: string | undefined;
    config: ScriptConfig;
    code: string;
    isDirty: boolean;
    directoryPath?: string | undefined;
    isNew: boolean;
}

export class ScriptConfig implements IScriptConfig {
    kind!: ScriptKind;
    namespaces!: string[];
    references!: Reference[];

    constructor(data?: IScriptConfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.namespaces = [];
            this.references = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kind = _data["kind"];
            if (Array.isArray(_data["namespaces"])) {
                this.namespaces = [] as any;
                for (let item of _data["namespaces"])
                    this.namespaces!.push(item);
            }
            if (Array.isArray(_data["references"])) {
                this.references = [] as any;
                for (let item of _data["references"])
                    this.references!.push(Reference.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ScriptConfig {
        data = typeof data === 'object' ? data : {};
        let result = new ScriptConfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kind"] = this.kind;
        if (Array.isArray(this.namespaces)) {
            data["namespaces"] = [];
            for (let item of this.namespaces)
                data["namespaces"].push(item);
        }
        if (Array.isArray(this.references)) {
            data["references"] = [];
            for (let item of this.references)
                data["references"].push(item.toJSON());
        }
        return data;
    }

    clone(): ScriptConfig {
        const json = this.toJSON();
        let result = new ScriptConfig();
        result.init(json);
        return result;
    }
}

export interface IScriptConfig {
    kind: ScriptKind;
    namespaces: string[];
    references: Reference[];
}

export type ScriptStatus = "Ready" | "Running" | "Stopping" | "Error";

export class Settings implements ISettings {
    version!: string;
    scriptsDirectoryPath!: string;
    autoSaveScriptsDirectoryPath!: string;
    packageCacheDirectoryPath!: string;
    appearance!: AppearanceOptions;
    editor!: EditorOptions;
    results!: ResultsOptions;
    omniSharp!: OmniSharpOptions;

    constructor(data?: ISettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.appearance = new AppearanceOptions();
            this.editor = new EditorOptions();
            this.results = new ResultsOptions();
            this.omniSharp = new OmniSharpOptions();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
            this.scriptsDirectoryPath = _data["scriptsDirectoryPath"];
            this.autoSaveScriptsDirectoryPath = _data["autoSaveScriptsDirectoryPath"];
            this.packageCacheDirectoryPath = _data["packageCacheDirectoryPath"];
            this.appearance = _data["appearance"] ? AppearanceOptions.fromJS(_data["appearance"]) : new AppearanceOptions();
            this.editor = _data["editor"] ? EditorOptions.fromJS(_data["editor"]) : new EditorOptions();
            this.results = _data["results"] ? ResultsOptions.fromJS(_data["results"]) : new ResultsOptions();
            this.omniSharp = _data["omniSharp"] ? OmniSharpOptions.fromJS(_data["omniSharp"]) : new OmniSharpOptions();
        }
    }

    static fromJS(data: any): Settings {
        data = typeof data === 'object' ? data : {};
        let result = new Settings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["scriptsDirectoryPath"] = this.scriptsDirectoryPath;
        data["autoSaveScriptsDirectoryPath"] = this.autoSaveScriptsDirectoryPath;
        data["packageCacheDirectoryPath"] = this.packageCacheDirectoryPath;
        data["appearance"] = this.appearance ? this.appearance.toJSON() : <any>undefined;
        data["editor"] = this.editor ? this.editor.toJSON() : <any>undefined;
        data["results"] = this.results ? this.results.toJSON() : <any>undefined;
        data["omniSharp"] = this.omniSharp ? this.omniSharp.toJSON() : <any>undefined;
        return data;
    }

    clone(): Settings {
        const json = this.toJSON();
        let result = new Settings();
        result.init(json);
        return result;
    }
}

export interface ISettings {
    version: string;
    scriptsDirectoryPath: string;
    autoSaveScriptsDirectoryPath: string;
    packageCacheDirectoryPath: string;
    appearance: AppearanceOptions;
    editor: EditorOptions;
    results: ResultsOptions;
    omniSharp: OmniSharpOptions;
}

export class AppearanceOptions implements IAppearanceOptions {
    theme!: Theme;
    showScriptRunStatusIndicatorInTab!: boolean;
    showScriptRunStatusIndicatorInScriptsList!: boolean;
    showScriptRunningIndicatorInScriptsList!: boolean;

    constructor(data?: IAppearanceOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.theme = _data["theme"];
            this.showScriptRunStatusIndicatorInTab = _data["showScriptRunStatusIndicatorInTab"];
            this.showScriptRunStatusIndicatorInScriptsList = _data["showScriptRunStatusIndicatorInScriptsList"];
            this.showScriptRunningIndicatorInScriptsList = _data["showScriptRunningIndicatorInScriptsList"];
        }
    }

    static fromJS(data: any): AppearanceOptions {
        data = typeof data === 'object' ? data : {};
        let result = new AppearanceOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["theme"] = this.theme;
        data["showScriptRunStatusIndicatorInTab"] = this.showScriptRunStatusIndicatorInTab;
        data["showScriptRunStatusIndicatorInScriptsList"] = this.showScriptRunStatusIndicatorInScriptsList;
        data["showScriptRunningIndicatorInScriptsList"] = this.showScriptRunningIndicatorInScriptsList;
        return data;
    }

    clone(): AppearanceOptions {
        const json = this.toJSON();
        let result = new AppearanceOptions();
        result.init(json);
        return result;
    }
}

export interface IAppearanceOptions {
    theme: Theme;
    showScriptRunStatusIndicatorInTab: boolean;
    showScriptRunStatusIndicatorInScriptsList: boolean;
    showScriptRunningIndicatorInScriptsList: boolean;
}

export type Theme = "Dark" | "Light";

export class EditorOptions implements IEditorOptions {
    backgroundColor?: string | undefined;
    codeCompletion!: CodeCompletionOptions;
    monacoOptions!: any;

    constructor(data?: IEditorOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.codeCompletion = new CodeCompletionOptions();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.backgroundColor = _data["backgroundColor"];
            this.codeCompletion = _data["codeCompletion"] ? CodeCompletionOptions.fromJS(_data["codeCompletion"]) : new CodeCompletionOptions();
            this.monacoOptions = _data["monacoOptions"];
        }
    }

    static fromJS(data: any): EditorOptions {
        data = typeof data === 'object' ? data : {};
        let result = new EditorOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["backgroundColor"] = this.backgroundColor;
        data["codeCompletion"] = this.codeCompletion ? this.codeCompletion.toJSON() : <any>undefined;
        data["monacoOptions"] = this.monacoOptions;
        return data;
    }

    clone(): EditorOptions {
        const json = this.toJSON();
        let result = new EditorOptions();
        result.init(json);
        return result;
    }
}

export interface IEditorOptions {
    backgroundColor?: string | undefined;
    codeCompletion: CodeCompletionOptions;
    monacoOptions: any;
}

export class CodeCompletionOptions implements ICodeCompletionOptions {
    enabled!: boolean;
    provider?: CodeCompletionProviderOptions | undefined;

    constructor(data?: ICodeCompletionOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
            this.provider = _data["provider"] ? CodeCompletionProviderOptions.fromJS(_data["provider"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CodeCompletionOptions {
        data = typeof data === 'object' ? data : {};
        let result = new CodeCompletionOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        data["provider"] = this.provider ? this.provider.toJSON() : <any>undefined;
        return data;
    }

    clone(): CodeCompletionOptions {
        const json = this.toJSON();
        let result = new CodeCompletionOptions();
        result.init(json);
        return result;
    }
}

export interface ICodeCompletionOptions {
    enabled: boolean;
    provider?: CodeCompletionProviderOptions | undefined;
}

export abstract class CodeCompletionProviderOptions implements ICodeCompletionProviderOptions {
    name?: string | undefined;

    protected _discriminator: string;

    constructor(data?: ICodeCompletionProviderOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "CodeCompletionProviderOptions";
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CodeCompletionProviderOptions {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "OmniSharpCodeCompletionProviderOptions") {
            let result = new OmniSharpCodeCompletionProviderOptions();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'CodeCompletionProviderOptions' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        data["name"] = this.name;
        return data;
    }

    clone(): CodeCompletionProviderOptions {
        throw new Error("The abstract class 'CodeCompletionProviderOptions' cannot be instantiated.");
    }
}

export interface ICodeCompletionProviderOptions {
    name?: string | undefined;
}

export class OmniSharpCodeCompletionProviderOptions extends CodeCompletionProviderOptions implements IOmniSharpCodeCompletionProviderOptions {
    executablePath?: string | undefined;

    constructor(data?: IOmniSharpCodeCompletionProviderOptions) {
        super(data);
        this._discriminator = "OmniSharpCodeCompletionProviderOptions";
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.executablePath = _data["executablePath"];
        }
    }

    static fromJS(data: any): OmniSharpCodeCompletionProviderOptions {
        data = typeof data === 'object' ? data : {};
        let result = new OmniSharpCodeCompletionProviderOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["executablePath"] = this.executablePath;
        super.toJSON(data);
        return data;
    }

    clone(): OmniSharpCodeCompletionProviderOptions {
        const json = this.toJSON();
        let result = new OmniSharpCodeCompletionProviderOptions();
        result.init(json);
        return result;
    }
}

export interface IOmniSharpCodeCompletionProviderOptions extends ICodeCompletionProviderOptions {
    executablePath?: string | undefined;
}

export class ResultsOptions implements IResultsOptions {
    openOnRun!: boolean;
    textWrap!: boolean;

    constructor(data?: IResultsOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.openOnRun = _data["openOnRun"];
            this.textWrap = _data["textWrap"];
        }
    }

    static fromJS(data: any): ResultsOptions {
        data = typeof data === 'object' ? data : {};
        let result = new ResultsOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["openOnRun"] = this.openOnRun;
        data["textWrap"] = this.textWrap;
        return data;
    }

    clone(): ResultsOptions {
        const json = this.toJSON();
        let result = new ResultsOptions();
        result.init(json);
        return result;
    }
}

export interface IResultsOptions {
    openOnRun: boolean;
    textWrap: boolean;
}

export class OmniSharpOptions implements IOmniSharpOptions {
    enabled!: boolean;
    executablePath?: string | undefined;
    enableAnalyzersSupport!: boolean;
    enableImportCompletion!: boolean;
    enableSemanticHighlighting!: boolean;
    enableCodeLensReferences!: boolean;
    inlayHints!: OmniSharpInlayHintsOptions;

    constructor(data?: IOmniSharpOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.inlayHints = new OmniSharpInlayHintsOptions();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
            this.executablePath = _data["executablePath"];
            this.enableAnalyzersSupport = _data["enableAnalyzersSupport"];
            this.enableImportCompletion = _data["enableImportCompletion"];
            this.enableSemanticHighlighting = _data["enableSemanticHighlighting"];
            this.enableCodeLensReferences = _data["enableCodeLensReferences"];
            this.inlayHints = _data["inlayHints"] ? OmniSharpInlayHintsOptions.fromJS(_data["inlayHints"]) : new OmniSharpInlayHintsOptions();
        }
    }

    static fromJS(data: any): OmniSharpOptions {
        data = typeof data === 'object' ? data : {};
        let result = new OmniSharpOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        data["executablePath"] = this.executablePath;
        data["enableAnalyzersSupport"] = this.enableAnalyzersSupport;
        data["enableImportCompletion"] = this.enableImportCompletion;
        data["enableSemanticHighlighting"] = this.enableSemanticHighlighting;
        data["enableCodeLensReferences"] = this.enableCodeLensReferences;
        data["inlayHints"] = this.inlayHints ? this.inlayHints.toJSON() : <any>undefined;
        return data;
    }

    clone(): OmniSharpOptions {
        const json = this.toJSON();
        let result = new OmniSharpOptions();
        result.init(json);
        return result;
    }
}

export interface IOmniSharpOptions {
    enabled: boolean;
    executablePath?: string | undefined;
    enableAnalyzersSupport: boolean;
    enableImportCompletion: boolean;
    enableSemanticHighlighting: boolean;
    enableCodeLensReferences: boolean;
    inlayHints: OmniSharpInlayHintsOptions;
}

export class OmniSharpInlayHintsOptions implements IOmniSharpInlayHintsOptions {
    enableParameters!: boolean;
    enableIndexerParameters!: boolean;
    enableLiteralParameters!: boolean;
    enableObjectCreationParameters!: boolean;
    enableOtherParameters!: boolean;
    suppressForParametersThatDifferOnlyBySuffix!: boolean;
    suppressForParametersThatMatchMethodIntent!: boolean;
    suppressForParametersThatMatchArgumentName!: boolean;
    enableTypes!: boolean;
    enableImplicitVariableTypes!: boolean;
    enableLambdaParameterTypes!: boolean;
    enableImplicitObjectCreation!: boolean;

    constructor(data?: IOmniSharpInlayHintsOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enableParameters = _data["enableParameters"];
            this.enableIndexerParameters = _data["enableIndexerParameters"];
            this.enableLiteralParameters = _data["enableLiteralParameters"];
            this.enableObjectCreationParameters = _data["enableObjectCreationParameters"];
            this.enableOtherParameters = _data["enableOtherParameters"];
            this.suppressForParametersThatDifferOnlyBySuffix = _data["suppressForParametersThatDifferOnlyBySuffix"];
            this.suppressForParametersThatMatchMethodIntent = _data["suppressForParametersThatMatchMethodIntent"];
            this.suppressForParametersThatMatchArgumentName = _data["suppressForParametersThatMatchArgumentName"];
            this.enableTypes = _data["enableTypes"];
            this.enableImplicitVariableTypes = _data["enableImplicitVariableTypes"];
            this.enableLambdaParameterTypes = _data["enableLambdaParameterTypes"];
            this.enableImplicitObjectCreation = _data["enableImplicitObjectCreation"];
        }
    }

    static fromJS(data: any): OmniSharpInlayHintsOptions {
        data = typeof data === 'object' ? data : {};
        let result = new OmniSharpInlayHintsOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enableParameters"] = this.enableParameters;
        data["enableIndexerParameters"] = this.enableIndexerParameters;
        data["enableLiteralParameters"] = this.enableLiteralParameters;
        data["enableObjectCreationParameters"] = this.enableObjectCreationParameters;
        data["enableOtherParameters"] = this.enableOtherParameters;
        data["suppressForParametersThatDifferOnlyBySuffix"] = this.suppressForParametersThatDifferOnlyBySuffix;
        data["suppressForParametersThatMatchMethodIntent"] = this.suppressForParametersThatMatchMethodIntent;
        data["suppressForParametersThatMatchArgumentName"] = this.suppressForParametersThatMatchArgumentName;
        data["enableTypes"] = this.enableTypes;
        data["enableImplicitVariableTypes"] = this.enableImplicitVariableTypes;
        data["enableLambdaParameterTypes"] = this.enableLambdaParameterTypes;
        data["enableImplicitObjectCreation"] = this.enableImplicitObjectCreation;
        return data;
    }

    clone(): OmniSharpInlayHintsOptions {
        const json = this.toJSON();
        let result = new OmniSharpInlayHintsOptions();
        result.init(json);
        return result;
    }
}

export interface IOmniSharpInlayHintsOptions {
    enableParameters: boolean;
    enableIndexerParameters: boolean;
    enableLiteralParameters: boolean;
    enableObjectCreationParameters: boolean;
    enableOtherParameters: boolean;
    suppressForParametersThatDifferOnlyBySuffix: boolean;
    suppressForParametersThatMatchMethodIntent: boolean;
    suppressForParametersThatMatchArgumentName: boolean;
    enableTypes: boolean;
    enableImplicitVariableTypes: boolean;
    enableLambdaParameterTypes: boolean;
    enableImplicitObjectCreation: boolean;
}

export class Types implements ITypes {
    yesNoCancel!: YesNoCancel;
    script?: Script | undefined;
    settingsUpdated?: SettingsUpdatedEvent | undefined;
    appStatusMessagePublished?: AppStatusMessagePublishedEvent | undefined;
    scriptPropertyChanged?: ScriptPropertyChangedEvent | undefined;
    scriptConfigPropertyChanged?: ScriptConfigPropertyChangedEvent | undefined;
    scriptOutputEmitted?: ScriptOutputEmittedEvent | undefined;
    environmentsAdded?: EnvironmentsAddedEvent | undefined;
    environmentsRemoved?: EnvironmentsRemovedEvent | undefined;
    environmentPropertyChanged?: EnvironmentPropertyChangedEvent | undefined;
    activeEnvironmentChanged?: ActiveEnvironmentChangedEvent | undefined;
    scriptDirectoryChanged?: ScriptDirectoryChangedEvent | undefined;
    openWindowCommand?: OpenWindowCommand | undefined;
    confirmSaveCommand?: ConfirmSaveCommand | undefined;
    requestNewScriptNameCommand?: RequestNewScriptNameCommand | undefined;

    constructor(data?: ITypes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.yesNoCancel = _data["yesNoCancel"];
            this.script = _data["script"] ? Script.fromJS(_data["script"]) : <any>undefined;
            this.settingsUpdated = _data["settingsUpdated"] ? SettingsUpdatedEvent.fromJS(_data["settingsUpdated"]) : <any>undefined;
            this.appStatusMessagePublished = _data["appStatusMessagePublished"] ? AppStatusMessagePublishedEvent.fromJS(_data["appStatusMessagePublished"]) : <any>undefined;
            this.scriptPropertyChanged = _data["scriptPropertyChanged"] ? ScriptPropertyChangedEvent.fromJS(_data["scriptPropertyChanged"]) : <any>undefined;
            this.scriptConfigPropertyChanged = _data["scriptConfigPropertyChanged"] ? ScriptConfigPropertyChangedEvent.fromJS(_data["scriptConfigPropertyChanged"]) : <any>undefined;
            this.scriptOutputEmitted = _data["scriptOutputEmitted"] ? ScriptOutputEmittedEvent.fromJS(_data["scriptOutputEmitted"]) : <any>undefined;
            this.environmentsAdded = _data["environmentsAdded"] ? EnvironmentsAddedEvent.fromJS(_data["environmentsAdded"]) : <any>undefined;
            this.environmentsRemoved = _data["environmentsRemoved"] ? EnvironmentsRemovedEvent.fromJS(_data["environmentsRemoved"]) : <any>undefined;
            this.environmentPropertyChanged = _data["environmentPropertyChanged"] ? EnvironmentPropertyChangedEvent.fromJS(_data["environmentPropertyChanged"]) : <any>undefined;
            this.activeEnvironmentChanged = _data["activeEnvironmentChanged"] ? ActiveEnvironmentChangedEvent.fromJS(_data["activeEnvironmentChanged"]) : <any>undefined;
            this.scriptDirectoryChanged = _data["scriptDirectoryChanged"] ? ScriptDirectoryChangedEvent.fromJS(_data["scriptDirectoryChanged"]) : <any>undefined;
            this.openWindowCommand = _data["openWindowCommand"] ? OpenWindowCommand.fromJS(_data["openWindowCommand"]) : <any>undefined;
            this.confirmSaveCommand = _data["confirmSaveCommand"] ? ConfirmSaveCommand.fromJS(_data["confirmSaveCommand"]) : <any>undefined;
            this.requestNewScriptNameCommand = _data["requestNewScriptNameCommand"] ? RequestNewScriptNameCommand.fromJS(_data["requestNewScriptNameCommand"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Types {
        data = typeof data === 'object' ? data : {};
        let result = new Types();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["yesNoCancel"] = this.yesNoCancel;
        data["script"] = this.script ? this.script.toJSON() : <any>undefined;
        data["settingsUpdated"] = this.settingsUpdated ? this.settingsUpdated.toJSON() : <any>undefined;
        data["appStatusMessagePublished"] = this.appStatusMessagePublished ? this.appStatusMessagePublished.toJSON() : <any>undefined;
        data["scriptPropertyChanged"] = this.scriptPropertyChanged ? this.scriptPropertyChanged.toJSON() : <any>undefined;
        data["scriptConfigPropertyChanged"] = this.scriptConfigPropertyChanged ? this.scriptConfigPropertyChanged.toJSON() : <any>undefined;
        data["scriptOutputEmitted"] = this.scriptOutputEmitted ? this.scriptOutputEmitted.toJSON() : <any>undefined;
        data["environmentsAdded"] = this.environmentsAdded ? this.environmentsAdded.toJSON() : <any>undefined;
        data["environmentsRemoved"] = this.environmentsRemoved ? this.environmentsRemoved.toJSON() : <any>undefined;
        data["environmentPropertyChanged"] = this.environmentPropertyChanged ? this.environmentPropertyChanged.toJSON() : <any>undefined;
        data["activeEnvironmentChanged"] = this.activeEnvironmentChanged ? this.activeEnvironmentChanged.toJSON() : <any>undefined;
        data["scriptDirectoryChanged"] = this.scriptDirectoryChanged ? this.scriptDirectoryChanged.toJSON() : <any>undefined;
        data["openWindowCommand"] = this.openWindowCommand ? this.openWindowCommand.toJSON() : <any>undefined;
        data["confirmSaveCommand"] = this.confirmSaveCommand ? this.confirmSaveCommand.toJSON() : <any>undefined;
        data["requestNewScriptNameCommand"] = this.requestNewScriptNameCommand ? this.requestNewScriptNameCommand.toJSON() : <any>undefined;
        return data;
    }

    clone(): Types {
        const json = this.toJSON();
        let result = new Types();
        result.init(json);
        return result;
    }
}

export interface ITypes {
    yesNoCancel: YesNoCancel;
    script?: Script | undefined;
    settingsUpdated?: SettingsUpdatedEvent | undefined;
    appStatusMessagePublished?: AppStatusMessagePublishedEvent | undefined;
    scriptPropertyChanged?: ScriptPropertyChangedEvent | undefined;
    scriptConfigPropertyChanged?: ScriptConfigPropertyChangedEvent | undefined;
    scriptOutputEmitted?: ScriptOutputEmittedEvent | undefined;
    environmentsAdded?: EnvironmentsAddedEvent | undefined;
    environmentsRemoved?: EnvironmentsRemovedEvent | undefined;
    environmentPropertyChanged?: EnvironmentPropertyChangedEvent | undefined;
    activeEnvironmentChanged?: ActiveEnvironmentChangedEvent | undefined;
    scriptDirectoryChanged?: ScriptDirectoryChangedEvent | undefined;
    openWindowCommand?: OpenWindowCommand | undefined;
    confirmSaveCommand?: ConfirmSaveCommand | undefined;
    requestNewScriptNameCommand?: RequestNewScriptNameCommand | undefined;
}

export type YesNoCancel = "Yes" | "No" | "Cancel";

export class SettingsUpdatedEvent implements ISettingsUpdatedEvent {
    settings!: Settings;

    constructor(data?: ISettingsUpdatedEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.settings = new Settings();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.settings = _data["settings"] ? Settings.fromJS(_data["settings"]) : new Settings();
        }
    }

    static fromJS(data: any): SettingsUpdatedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new SettingsUpdatedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        return data;
    }

    clone(): SettingsUpdatedEvent {
        const json = this.toJSON();
        let result = new SettingsUpdatedEvent();
        result.init(json);
        return result;
    }
}

export interface ISettingsUpdatedEvent {
    settings: Settings;
}

export class AppStatusMessagePublishedEvent implements IAppStatusMessagePublishedEvent {
    message!: AppStatusMessage;

    constructor(data?: IAppStatusMessagePublishedEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.message = new AppStatusMessage();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"] ? AppStatusMessage.fromJS(_data["message"]) : new AppStatusMessage();
        }
    }

    static fromJS(data: any): AppStatusMessagePublishedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new AppStatusMessagePublishedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message ? this.message.toJSON() : <any>undefined;
        return data;
    }

    clone(): AppStatusMessagePublishedEvent {
        const json = this.toJSON();
        let result = new AppStatusMessagePublishedEvent();
        result.init(json);
        return result;
    }
}

export interface IAppStatusMessagePublishedEvent {
    message: AppStatusMessage;
}

export class AppStatusMessage implements IAppStatusMessage {
    scriptId?: string | undefined;
    text!: string;
    priority!: AppStatusMessagePriority;
    persistant!: boolean;
    createdDate!: Date;

    constructor(data?: IAppStatusMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.scriptId = _data["scriptId"];
            this.text = _data["text"];
            this.priority = _data["priority"];
            this.persistant = _data["persistant"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AppStatusMessage {
        data = typeof data === 'object' ? data : {};
        let result = new AppStatusMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scriptId"] = this.scriptId;
        data["text"] = this.text;
        data["priority"] = this.priority;
        data["persistant"] = this.persistant;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }

    clone(): AppStatusMessage {
        const json = this.toJSON();
        let result = new AppStatusMessage();
        result.init(json);
        return result;
    }
}

export interface IAppStatusMessage {
    scriptId?: string | undefined;
    text: string;
    priority: AppStatusMessagePriority;
    persistant: boolean;
    createdDate: Date;
}

export type AppStatusMessagePriority = "Normal" | "High";

export abstract class PropertyChangedEvent implements IPropertyChangedEvent {
    propertyName!: string;
    newValue?: any | undefined;

    constructor(data?: IPropertyChangedEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            this.newValue = _data["newValue"];
        }
    }

    static fromJS(data: any): PropertyChangedEvent {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'PropertyChangedEvent' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["newValue"] = this.newValue;
        return data;
    }

    clone(): PropertyChangedEvent {
        throw new Error("The abstract class 'PropertyChangedEvent' cannot be instantiated.");
    }
}

export interface IPropertyChangedEvent {
    propertyName: string;
    newValue?: any | undefined;
}

export class ScriptPropertyChangedEvent extends PropertyChangedEvent implements IScriptPropertyChangedEvent {
    scriptId!: string;

    constructor(data?: IScriptPropertyChangedEvent) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.scriptId = _data["scriptId"];
        }
    }

    static fromJS(data: any): ScriptPropertyChangedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ScriptPropertyChangedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scriptId"] = this.scriptId;
        super.toJSON(data);
        return data;
    }

    clone(): ScriptPropertyChangedEvent {
        const json = this.toJSON();
        let result = new ScriptPropertyChangedEvent();
        result.init(json);
        return result;
    }
}

export interface IScriptPropertyChangedEvent extends IPropertyChangedEvent {
    scriptId: string;
}

export class ScriptConfigPropertyChangedEvent extends PropertyChangedEvent implements IScriptConfigPropertyChangedEvent {
    scriptId!: string;

    constructor(data?: IScriptConfigPropertyChangedEvent) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.scriptId = _data["scriptId"];
        }
    }

    static fromJS(data: any): ScriptConfigPropertyChangedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ScriptConfigPropertyChangedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scriptId"] = this.scriptId;
        super.toJSON(data);
        return data;
    }

    clone(): ScriptConfigPropertyChangedEvent {
        const json = this.toJSON();
        let result = new ScriptConfigPropertyChangedEvent();
        result.init(json);
        return result;
    }
}

export interface IScriptConfigPropertyChangedEvent extends IPropertyChangedEvent {
    scriptId: string;
}

export class ScriptOutputEmittedEvent implements IScriptOutputEmittedEvent {
    scriptId!: string;
    output?: string | undefined;

    constructor(data?: IScriptOutputEmittedEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.scriptId = _data["scriptId"];
            this.output = _data["output"];
        }
    }

    static fromJS(data: any): ScriptOutputEmittedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ScriptOutputEmittedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scriptId"] = this.scriptId;
        data["output"] = this.output;
        return data;
    }

    clone(): ScriptOutputEmittedEvent {
        const json = this.toJSON();
        let result = new ScriptOutputEmittedEvent();
        result.init(json);
        return result;
    }
}

export interface IScriptOutputEmittedEvent {
    scriptId: string;
    output?: string | undefined;
}

export class EnvironmentsAddedEvent implements IEnvironmentsAddedEvent {
    environments!: ScriptEnvironment[];

    constructor(data?: IEnvironmentsAddedEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.environments = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["environments"])) {
                this.environments = [] as any;
                for (let item of _data["environments"])
                    this.environments!.push(ScriptEnvironment.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EnvironmentsAddedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentsAddedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.environments)) {
            data["environments"] = [];
            for (let item of this.environments)
                data["environments"].push(item.toJSON());
        }
        return data;
    }

    clone(): EnvironmentsAddedEvent {
        const json = this.toJSON();
        let result = new EnvironmentsAddedEvent();
        result.init(json);
        return result;
    }
}

export interface IEnvironmentsAddedEvent {
    environments: ScriptEnvironment[];
}

export class EnvironmentsRemovedEvent implements IEnvironmentsRemovedEvent {
    environments!: ScriptEnvironment[];

    constructor(data?: IEnvironmentsRemovedEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.environments = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["environments"])) {
                this.environments = [] as any;
                for (let item of _data["environments"])
                    this.environments!.push(ScriptEnvironment.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EnvironmentsRemovedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentsRemovedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.environments)) {
            data["environments"] = [];
            for (let item of this.environments)
                data["environments"].push(item.toJSON());
        }
        return data;
    }

    clone(): EnvironmentsRemovedEvent {
        const json = this.toJSON();
        let result = new EnvironmentsRemovedEvent();
        result.init(json);
        return result;
    }
}

export interface IEnvironmentsRemovedEvent {
    environments: ScriptEnvironment[];
}

export class EnvironmentPropertyChangedEvent extends PropertyChangedEvent implements IEnvironmentPropertyChangedEvent {
    scriptId!: string;

    constructor(data?: IEnvironmentPropertyChangedEvent) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.scriptId = _data["scriptId"];
        }
    }

    static fromJS(data: any): EnvironmentPropertyChangedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new EnvironmentPropertyChangedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scriptId"] = this.scriptId;
        super.toJSON(data);
        return data;
    }

    clone(): EnvironmentPropertyChangedEvent {
        const json = this.toJSON();
        let result = new EnvironmentPropertyChangedEvent();
        result.init(json);
        return result;
    }
}

export interface IEnvironmentPropertyChangedEvent extends IPropertyChangedEvent {
    scriptId: string;
}

export class ActiveEnvironmentChangedEvent implements IActiveEnvironmentChangedEvent {
    scriptId?: string | undefined;

    constructor(data?: IActiveEnvironmentChangedEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.scriptId = _data["scriptId"];
        }
    }

    static fromJS(data: any): ActiveEnvironmentChangedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ActiveEnvironmentChangedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scriptId"] = this.scriptId;
        return data;
    }

    clone(): ActiveEnvironmentChangedEvent {
        const json = this.toJSON();
        let result = new ActiveEnvironmentChangedEvent();
        result.init(json);
        return result;
    }
}

export interface IActiveEnvironmentChangedEvent {
    scriptId?: string | undefined;
}

export class ScriptDirectoryChangedEvent implements IScriptDirectoryChangedEvent {
    scripts!: ScriptSummary[];

    constructor(data?: IScriptDirectoryChangedEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.scripts = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["scripts"])) {
                this.scripts = [] as any;
                for (let item of _data["scripts"])
                    this.scripts!.push(ScriptSummary.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ScriptDirectoryChangedEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ScriptDirectoryChangedEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.scripts)) {
            data["scripts"] = [];
            for (let item of this.scripts)
                data["scripts"].push(item.toJSON());
        }
        return data;
    }

    clone(): ScriptDirectoryChangedEvent {
        const json = this.toJSON();
        let result = new ScriptDirectoryChangedEvent();
        result.init(json);
        return result;
    }
}

export interface IScriptDirectoryChangedEvent {
    scripts: ScriptSummary[];
}

export abstract class CommandBase implements ICommandBase {
    id!: string;

    constructor(data?: ICommandBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CommandBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'CommandBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): CommandBase {
        throw new Error("The abstract class 'CommandBase' cannot be instantiated.");
    }
}

export interface ICommandBase {
    id: string;
}

export abstract class Command extends CommandBase implements ICommand {

    constructor(data?: ICommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): Command {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Command' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }

    clone(): Command {
        throw new Error("The abstract class 'Command' cannot be instantiated.");
    }
}

export interface ICommand extends ICommandBase {
}

export class OpenWindowCommand extends Command implements IOpenWindowCommand {
    windowName!: string;
    options!: WindowOptions;
    metadata!: { [key: string]: any; };

    constructor(data?: IOpenWindowCommand) {
        super(data);
        if (!data) {
            this.options = new WindowOptions();
            this.metadata = {};
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.windowName = _data["windowName"];
            this.options = _data["options"] ? WindowOptions.fromJS(_data["options"]) : new WindowOptions();
            if (_data["metadata"]) {
                this.metadata = {} as any;
                for (let key in _data["metadata"]) {
                    if (_data["metadata"].hasOwnProperty(key))
                        (<any>this.metadata)![key] = _data["metadata"][key];
                }
            }
        }
    }

    static fromJS(data: any): OpenWindowCommand {
        data = typeof data === 'object' ? data : {};
        let result = new OpenWindowCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["windowName"] = this.windowName;
        data["options"] = this.options ? this.options.toJSON() : <any>undefined;
        if (this.metadata) {
            data["metadata"] = {};
            for (let key in this.metadata) {
                if (this.metadata.hasOwnProperty(key))
                    (<any>data["metadata"])[key] = this.metadata[key];
            }
        }
        super.toJSON(data);
        return data;
    }

    clone(): OpenWindowCommand {
        const json = this.toJSON();
        let result = new OpenWindowCommand();
        result.init(json);
        return result;
    }
}

export interface IOpenWindowCommand extends ICommand {
    windowName: string;
    options: WindowOptions;
    metadata: { [key: string]: any; };
}

export class WindowOptions implements IWindowOptions {
    height!: number;
    width!: number;

    constructor(data?: IWindowOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.height = _data["height"];
            this.width = _data["width"];
        }
    }

    static fromJS(data: any): WindowOptions {
        data = typeof data === 'object' ? data : {};
        let result = new WindowOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["height"] = this.height;
        data["width"] = this.width;
        return data;
    }

    clone(): WindowOptions {
        const json = this.toJSON();
        let result = new WindowOptions();
        result.init(json);
        return result;
    }
}

export interface IWindowOptions {
    height: number;
    width: number;
}

export abstract class CommandOfYesNoCancel extends CommandBase implements ICommandOfYesNoCancel {

    constructor(data?: ICommandOfYesNoCancel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CommandOfYesNoCancel {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'CommandOfYesNoCancel' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }

    clone(): CommandOfYesNoCancel {
        throw new Error("The abstract class 'CommandOfYesNoCancel' cannot be instantiated.");
    }
}

export interface ICommandOfYesNoCancel extends ICommandBase {
}

export class ConfirmSaveCommand extends CommandOfYesNoCancel implements IConfirmSaveCommand {
    message!: string;

    constructor(data?: IConfirmSaveCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ConfirmSaveCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmSaveCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        super.toJSON(data);
        return data;
    }

    clone(): ConfirmSaveCommand {
        const json = this.toJSON();
        let result = new ConfirmSaveCommand();
        result.init(json);
        return result;
    }
}

export interface IConfirmSaveCommand extends ICommandOfYesNoCancel {
    message: string;
}

export abstract class CommandOfString extends CommandBase implements ICommandOfString {

    constructor(data?: ICommandOfString) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CommandOfString {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'CommandOfString' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }

    clone(): CommandOfString {
        throw new Error("The abstract class 'CommandOfString' cannot be instantiated.");
    }
}

export interface ICommandOfString extends ICommandBase {
}

export class RequestNewScriptNameCommand extends CommandOfString implements IRequestNewScriptNameCommand {
    currentScriptName!: string;

    constructor(data?: IRequestNewScriptNameCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.currentScriptName = _data["currentScriptName"];
        }
    }

    static fromJS(data: any): RequestNewScriptNameCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RequestNewScriptNameCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentScriptName"] = this.currentScriptName;
        super.toJSON(data);
        return data;
    }

    clone(): RequestNewScriptNameCommand {
        const json = this.toJSON();
        let result = new RequestNewScriptNameCommand();
        result.init(json);
        return result;
    }
}

export interface IRequestNewScriptNameCommand extends ICommandOfString {
    currentScriptName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}